// This file is part of Core WF which is licensed under the MIT license.
// See LICENSE file in the project root for full license information.

using System.Resources;

namespace System.Activities;

public class SR : StringResourceBase
{
    internal static readonly SR Instance = new();

    private ResourceManager _resourceManager;

    protected internal override ResourceManager ResourceManager
    {
        get
        {
            _resourceManager ??= new ResourceManager("UiPath.Workflow.Runtime.Resources.SR", typeof(SR).Assembly);
            return _resourceManager;
        }
    }

    internal static string AbortingDueToInstanceTimeout => Instance["AbortingDueToInstanceTimeout"];
    internal static string AbortingDueToLoadFailure => Instance["AbortingDueToLoadFailure"];
    internal static string AbortingDueToVersionMismatch => Instance["AbortingDueToVersionMismatch"];
    internal static string AbortInstanceOnTransactionFailureDoesNotMatch => Instance["AbortInstanceOnTransactionFailureDoesNotMatch"];
    internal static string ActionItemIsAlreadyScheduled => Instance["ActionItemIsAlreadyScheduled"];
    internal static string ActivityCannotBeReferenced(object p0, object p1, object p2, object p3) => Instance["ActivityCannotBeReferenced", p0, p1, p2, p3];
    internal static string ActivityCannotBeReferencedWithoutTarget(object p0, object p1, object p2) => Instance["ActivityCannotBeReferencedWithoutTarget", p0, p1, p2];
    internal static string ActivityCannotReferenceItself(object p0) => Instance["ActivityCannotReferenceItself", p0];
    internal static string ActivityDelegateCannotBeReferenced(object p0, object p1, object p2, object p3) => Instance["ActivityDelegateCannotBeReferenced", p0, p1, p2, p3];
    internal static string ActivityDelegateCannotBeReferencedNoHandler(object p0, object p1, object p2) => Instance["ActivityDelegateCannotBeReferencedNoHandler", p0, p1, p2];
    internal static string ActivityDelegateCannotBeReferencedWithoutTarget(object p0, object p1, object p2) => Instance["ActivityDelegateCannotBeReferencedWithoutTarget", p0, p1, p2];
    internal static string ActivityDelegateCannotBeReferencedWithoutTargetNoHandler(object p0, object p1) => Instance["ActivityDelegateCannotBeReferencedWithoutTargetNoHandler", p0, p1];
    internal static string ActivityDelegateHandlersMustBeDeclarations(object p0, object p1, object p2) => Instance["ActivityDelegateHandlersMustBeDeclarations", p0, p1, p2];
    internal static string ActivityDelegateOwnerMissing(object p0) => Instance["ActivityDelegateOwnerMissing", p0];
    internal static string ActivityInstanceFixupFailed => Instance["ActivityInstanceFixupFailed"];
    internal static string ActivityIsUncached => Instance["ActivityIsUncached"];
    internal static string ActivityNotPartOfThisTree(object p0, object p1) => Instance["ActivityNotPartOfThisTree", p0, p1];
    internal static string ActivityPropertyMustBeSet(object p0, object p1) => Instance["ActivityPropertyMustBeSet", p0, p1];
    internal static string ActivityPropertyRequiresName(object p0) => Instance["ActivityPropertyRequiresName", p0];
    internal static string ActivityPropertyRequiresType(object p0) => Instance["ActivityPropertyRequiresType", p0];
    internal static string ActivityTypeMismatch(object p0, object p1) => Instance["ActivityTypeMismatch", p0, p1];
    internal static string ActivityXamlServiceLineString => Instance["ActivityXamlServiceLineString"];
    internal static string ActivityXamlServicesCompilationFailed(object p0) => Instance["ActivityXamlServicesCompilationFailed", p0];
    internal static string ActivityXamlServicesRequiresActivity(object p0) => Instance["ActivityXamlServicesRequiresActivity", p0];
    internal static string AddValidationErrorMustBeCalledFromConstraint(object p0) => Instance["AddValidationErrorMustBeCalledFromConstraint", p0];
    internal static string AECDisposed => Instance["AECDisposed"];
    internal static string AECForPropertiesHasBeenDisposed => Instance["AECForPropertiesHasBeenDisposed"];
    internal static string AlreadyBoundToInstance => Instance["AlreadyBoundToInstance"];
    internal static string AlreadyBoundToOwner => Instance["AlreadyBoundToOwner"];
    internal static string AmbiguousVBVariableReference(object p0) => Instance["AmbiguousVBVariableReference", p0];
    internal static string ArgumentAlreadyInUse(object p0, object p1, object p2) => Instance["ArgumentAlreadyInUse", p0, p1, p2];
    internal static string ArgumentDirectionMismatch(object p0, object p1, object p2) => Instance["ArgumentDirectionMismatch", p0, p1, p2];
    internal static string ArgumentDoesNotExistInEnvironment(object p0) => Instance["ArgumentDoesNotExistInEnvironment", p0];
    internal static string ArgumentIsAddedMoreThanOnce(object p0, object p1) => Instance["ArgumentIsAddedMoreThanOnce", p0, p1];
    internal static string ArgumentLocationExpressionTypeMismatch(object p0, object p1) => Instance["ArgumentLocationExpressionTypeMismatch", p0, p1];
    internal static string ArgumentMustbePropertyofWorkflowElement => Instance["ArgumentMustbePropertyofWorkflowElement"];
    internal static string ArgumentNameRequired => Instance["ArgumentNameRequired"];
    internal static string ArgumentNotFound(object p0) => Instance["ArgumentNotFound", p0];
    internal static string ArgumentNotInTree(object p0) => Instance["ArgumentNotInTree", p0];
    internal static string ArgumentNullOrEmpty(object p0) => Instance["ArgumentNullOrEmpty", p0];
    internal static string ArgumentNumberRequiresTheSameAsParameterNumber(object p0) => Instance["ArgumentNumberRequiresTheSameAsParameterNumber", p0];
    internal static string ArgumentRequired(object p0, object p1) => Instance["ArgumentRequired", p0, p1];
    internal static string ArgumentTypeMismatch(object p0, object p1, object p2) => Instance["ArgumentTypeMismatch", p0, p1, p2];
    internal static string ArgumentTypeMustBeCompatible(object p0, object p1, object p2) => Instance["ArgumentTypeMustBeCompatible", p0, p1, p2];
    internal static string ArgumentValueExpressionTypeMismatch(object p0, object p1) => Instance["ArgumentValueExpressionTypeMismatch", p0, p1];
    internal static string AssemblyReferenceIsImmutable => Instance["AssemblyReferenceIsImmutable"];
    internal static string AsyncCallbackThrewException => Instance["AsyncCallbackThrewException"];
    internal static string AsyncResultAlreadyEnded => Instance["AsyncResultAlreadyEnded"];
    internal static string AsyncResultCompletedTwice(object p0) => Instance["AsyncResultCompletedTwice", p0];
    internal static string AsyncTransactionException => Instance["AsyncTransactionException"];
    internal static string BadWorkflowIdentityFormat => Instance["BadWorkflowIdentityFormat"];
    internal static string BeforeInitializeComponentXBTExtensionResourceNotFound => Instance["BeforeInitializeComponentXBTExtensionResourceNotFound"];
    internal static string BeginExecuteMustNotReturnANullAsyncResult => Instance["BeginExecuteMustNotReturnANullAsyncResult"];
    internal static string BeginExecuteMustUseProvidedStateAsAsyncResultState => Instance["BeginExecuteMustUseProvidedStateAsAsyncResultState"];
    internal static string BinaryExpressionActivityRequiresArgument(object p0, object p1, object p2) => Instance["BinaryExpressionActivityRequiresArgument", p0, p1, p2];
    internal static string BindLockRequiresCommandFlag => Instance["BindLockRequiresCommandFlag"];
    internal static string BindReclaimedLockException => Instance["BindReclaimedLockException"];
    internal static string BindReclaimSucceeded => Instance["BindReclaimSucceeded"];
    internal static string BookmarkAlreadyExists(object p0) => Instance["BookmarkAlreadyExists", p0];
    internal static string BookmarkNotRegistered(object p0) => Instance["BookmarkNotRegistered", p0];
    internal static string BookmarkScopeAlreadyInitialized => Instance["BookmarkScopeAlreadyInitialized"];
    internal static string BookmarkScopeHasBookmarks => Instance["BookmarkScopeHasBookmarks"];
    internal static string BookmarkScopeNotRegisteredForInitialize => Instance["BookmarkScopeNotRegisteredForInitialize"];
    internal static string BookmarkScopeNotRegisteredForUnregister => Instance["BookmarkScopeNotRegisteredForUnregister"];
    internal static string BookmarkScopesRequireKeys => Instance["BookmarkScopesRequireKeys"];
    internal static string BookmarkScopeWithIdAlreadyExists(object p0) => Instance["BookmarkScopeWithIdAlreadyExists", p0];
    internal static string BookmarksOnlyResumableWhileIdle => Instance["BookmarksOnlyResumableWhileIdle"];
    internal static string CallbackExceptionFromHostAbort(object p0) => Instance["CallbackExceptionFromHostAbort", p0];
    internal static string CallbackExceptionFromHostGetExtension(object p0) => Instance["CallbackExceptionFromHostGetExtension", p0];
    internal static string CancellationHandlerFatalException(object p0) => Instance["CancellationHandlerFatalException", p0];
    internal static string CanInduceIdleActivityInArgumentExpression(object p0, object p1, object p2) => Instance["CanInduceIdleActivityInArgumentExpression", p0, p1, p2];
    internal static string CanInduceIdleNotSpecified(object p0) => Instance["CanInduceIdleNotSpecified", p0];
    internal static string CannotAcquireLockDefault => Instance["CannotAcquireLockDefault"];
    internal static string CannotAcquireLockSpecific(object p0) => Instance["CannotAcquireLockSpecific", p0];
    internal static string CannotAcquireLockSpecificWithOwner(object p0, object p1) => Instance["CannotAcquireLockSpecificWithOwner", p0, p1];
    internal static string CannotAddOrRemoveWithChildren => Instance["CannotAddOrRemoveWithChildren"];
    internal static string CannotChangeAbortInstanceFlagAfterPropertyRegistration => Instance["CannotChangeAbortInstanceFlagAfterPropertyRegistration"];
    internal static string CannotCompleteRuntimeOwnedTransaction => Instance["CannotCompleteRuntimeOwnedTransaction"];
    internal static string CannotCompleteWithKeys => Instance["CannotCompleteWithKeys"];
    internal static string CannotConvertObject(object p0, object p1) => Instance["CannotConvertObject", p0, p1];
    internal static string CannotCreateContextWithNullId => Instance["CannotCreateContextWithNullId"];
    internal static string CannotCreateOwnerWithoutIdentity => Instance["CannotCreateOwnerWithoutIdentity"];
    internal static string CannotDereferenceNull(object p0) => Instance["CannotDereferenceNull", p0];
    internal static string CanNotFindSymbolResolverInWorkflowInstanceExtensions => Instance["CanNotFindSymbolResolverInWorkflowInstanceExtensions"];
    internal static string CannotGenerateSchemaForXmlSerializable(object p0) => Instance["CannotGenerateSchemaForXmlSerializable", p0];
    internal static string CannotInvokeBindingFromNonBinding => Instance["CannotInvokeBindingFromNonBinding"];
    internal static string CannotNestTransactionScopeWhenAmbientHandleIsSuppressed(object p0) => Instance["CannotNestTransactionScopeWhenAmbientHandleIsSuppressed", p0];
    internal static string CannotPerformOperationFromHandlerThread => Instance["CannotPerformOperationFromHandlerThread"];
    internal static string CannotPerformOperationOnHandle => Instance["CannotPerformOperationOnHandle"];
    internal static string CannotPersistInsideNoPersist => Instance["CannotPersistInsideNoPersist"];
    internal static string CannotPropagateExceptionWhileCanceling(object p0, object p1) => Instance["CannotPropagateExceptionWhileCanceling", p0, p1];
    internal static string CannotResetPropertyInDataContext => Instance["CannotResetPropertyInDataContext"];
    internal static string CannotScheduleChildrenWhileEnteringIsolation => Instance["CannotScheduleChildrenWhileEnteringIsolation"];
    internal static string CannotSerializeExpression(object p0) => Instance["CannotSerializeExpression", p0];
    internal static string CannotSetRuntimeTransactionInNoPersist => Instance["CannotSetRuntimeTransactionInNoPersist"];
    internal static string CannotSetValueToLocation(object p0, object p1, object p2) => Instance["CannotSetValueToLocation", p0, p1, p2];
    internal static string CannotSuppressAlreadyRegisteredHandle => Instance["CannotSuppressAlreadyRegisteredHandle"];
    internal static string CannotUnregisterDefaultBookmarkScope => Instance["CannotUnregisterDefaultBookmarkScope"];
    internal static string CannotUnregisterNullBookmarkScope => Instance["CannotUnregisterNullBookmarkScope"];
    internal static string CannotUseInputsWithLoad => Instance["CannotUseInputsWithLoad"];
    internal static string CannotValidateNullObject(object p0, object p1) => Instance["CannotValidateNullObject", p0, p1];
    internal static string CanOnlyAbortDirectChildren => Instance["CanOnlyAbortDirectChildren"];
    internal static string CanOnlyCancelDirectChildren => Instance["CanOnlyCancelDirectChildren"];
    internal static string CanOnlyGetOwnedArguments(object p0, object p1, object p2) => Instance["CanOnlyGetOwnedArguments", p0, p1, p2];
    internal static string CanOnlyScheduleDirectChildren(object p0, object p1, object p2) => Instance["CanOnlyScheduleDirectChildren", p0, p1, p2];
    internal static string CatchOrFinallyExpected(object p0) => Instance["CatchOrFinallyExpected", p0];
    internal static string CollectionActivityRequiresCollection(object p0) => Instance["CollectionActivityRequiresCollection", p0];
    internal static string CommandExecutionCannotOverlap => Instance["CommandExecutionCannotOverlap"];
    internal static string CompensableActivityAlreadyConfirmedOrCompensated => Instance["CompensableActivityAlreadyConfirmedOrCompensated"];
    internal static string CompensableActivityInsideTransactionScopeActivity => Instance["CompensableActivityInsideTransactionScopeActivity"];
    internal static string CompensateWithNoTargetConstraint => Instance["CompensateWithNoTargetConstraint"];
    internal static string CompensateWithoutCompensableActivity(object p0) => Instance["CompensateWithoutCompensableActivity", p0];
    internal static string CompensationHandlerFatalException(object p0) => Instance["CompensationHandlerFatalException", p0];
    internal static string CompiledExpressionsActivityException(object p0, object p1, object p2) => Instance["CompiledExpressionsActivityException", p0, p1, p2];
    internal static string CompiledExpressionsCacheMetadataException(object p0, object p1) => Instance["CompiledExpressionsCacheMetadataException", p0, p1];
    internal static string CompiledExpressionsDuplicateName(object p0) => Instance["CompiledExpressionsDuplicateName", p0];
    internal static string CompiledExpressionsIgnoringInvalidIdentifierVariable(object p0) => Instance["CompiledExpressionsIgnoringInvalidIdentifierVariable", p0];
    internal static string CompiledExpressionsIgnoringUnnamedVariable => Instance["CompiledExpressionsIgnoringUnnamedVariable"];
    internal static string CompiledExpressionsNoCompiledRoot(object p0) => Instance["CompiledExpressionsNoCompiledRoot", p0];
    internal static string CompiledLocationReferenceGetLocation => Instance["CompiledLocationReferenceGetLocation"];
    internal static string CompilerError => Instance["CompilerError"];
    internal static string CompilerErrorSpecificExpression(object p0, object p1) => Instance["CompilerErrorSpecificExpression", p0, p1];
    internal static string CompletedMustNotHaveAssociatedKeys => Instance["CompletedMustNotHaveAssociatedKeys"];
    internal static string ConfirmationHandlerFatalException(object p0) => Instance["ConfirmationHandlerFatalException", p0];
    internal static string ConfirmWithNoTargetConstraint => Instance["ConfirmWithNoTargetConstraint"];
    internal static string ConfirmWithoutCompensableActivity(object p0) => Instance["ConfirmWithoutCompensableActivity", p0];
    internal static string ConstructorInfoNotFound(object p0) => Instance["ConstructorInfoNotFound", p0];
    internal static string ConstVariableCannotBeSet => Instance["ConstVariableCannotBeSet"];
    internal static string ContextAlreadyBoundToInstance => Instance["ContextAlreadyBoundToInstance"];
    internal static string ContextAlreadyBoundToLock => Instance["ContextAlreadyBoundToLock"];
    internal static string ContextAlreadyBoundToOwner => Instance["ContextAlreadyBoundToOwner"];
    internal static string ContextMustBeBoundToInstance => Instance["ContextMustBeBoundToInstance"];
    internal static string ContextMustBeBoundToOwner => Instance["ContextMustBeBoundToOwner"];
    internal static string ContextNotFromThisStore => Instance["ContextNotFromThisStore"];
    internal static string ControllerInvalidBeforeInitialize => Instance["ControllerInvalidBeforeInitialize"];
    internal static string ConvertVariableToValueExpressionFailed(object p0, object p1) => Instance["ConvertVariableToValueExpressionFailed", p0, p1];
    internal static string CopyToIndexOutOfRange => Instance["CopyToIndexOutOfRange"];
    internal static string CopyToNotEnoughSpaceInArray => Instance["CopyToNotEnoughSpaceInArray"];
    internal static string CopyToRankMustBeOne => Instance["CopyToRankMustBeOne"];
    internal static string CreateBookmarkScopeFailed => Instance["CreateBookmarkScopeFailed"];
    internal static string DefaultAbortReason => Instance["DefaultAbortReason"];
    internal static string DefaultCancelationRequiresCancelHasBeenRequested => Instance["DefaultCancelationRequiresCancelHasBeenRequested"];
    internal static string DefaultInvalidWorkflowExceptionMessage => Instance["DefaultInvalidWorkflowExceptionMessage"];
    internal static string DefaultWorkflowApplicationExceptionMessage => Instance["DefaultWorkflowApplicationExceptionMessage"];
    internal static string DelegateArgumentAlreadyInUseOnActivity(object p0, object p1, object p2) => Instance["DelegateArgumentAlreadyInUseOnActivity", p0, p1, p2];
    internal static string DelegateArgumentDoesNotExist(object p0) => Instance["DelegateArgumentDoesNotExist", p0];
    internal static string DelegateArgumentMustBeReferenced(object p0) => Instance["DelegateArgumentMustBeReferenced", p0];
    internal static string DelegateArgumentMustBeSet => Instance["DelegateArgumentMustBeSet"];
    internal static string DelegateArgumentNotVisible(object p0) => Instance["DelegateArgumentNotVisible", p0];
    internal static string DelegateArgumentTypeInvalid(object p0, object p1, object p2) => Instance["DelegateArgumentTypeInvalid", p0, p1, p2];
    internal static string DelegateHandlersCannotBeScheduledDirectly(object p0, object p1) => Instance["DelegateHandlersCannotBeScheduledDirectly", p0, p1];
    internal static string DelegateInArgumentTypeMismatch(object p0, object p1, object p2) => Instance["DelegateInArgumentTypeMismatch", p0, p1, p2];
    internal static string DelegateOutArgumentTypeMismatch(object p0, object p1, object p2) => Instance["DelegateOutArgumentTypeMismatch", p0, p1, p2];
    internal static string DelegateParameterDirectionalityMismatch(object p0, object p1, object p2) => Instance["DelegateParameterDirectionalityMismatch", p0, p1, p2];
    internal static string DictionaryIsReadOnly => Instance["DictionaryIsReadOnly"];
    internal static string DoNotCompleteTryCommandWithPendingReclaim => Instance["DoNotCompleteTryCommandWithPendingReclaim"];
    internal static string DoNotSupportArrayIndexerOnNonArrayType(object p0) => Instance["DoNotSupportArrayIndexerOnNonArrayType", p0];
    internal static string DoNotSupportArrayIndexerReferenceWithDifferentArrayTypeAndResultType(object p0, object p1) => Instance["DoNotSupportArrayIndexerReferenceWithDifferentArrayTypeAndResultType", p0, p1];
    internal static string DoNotSupportArrayIndexerValueWithIncompatibleArrayTypeAndResultType(object p0, object p1) => Instance["DoNotSupportArrayIndexerValueWithIncompatibleArrayTypeAndResultType", p0, p1];
    internal static string DoNotSupportArrayIndexerWithNonIntIndex(object p0) => Instance["DoNotSupportArrayIndexerWithNonIntIndex", p0];
    internal static string DoWhileRequiresCondition(object p0) => Instance["DoWhileRequiresCondition", p0];
    internal static string DuplicateCatchClause(object p0) => Instance["DuplicateCatchClause", p0];
    internal static string DuplicateEvaluationOrderValues(object p0, object p1) => Instance["DuplicateEvaluationOrderValues", p0, p1];
    internal static string DuplicateMethodFound(object p0, object p1, object p2, object p3) => Instance["DuplicateMethodFound", p0, p1, p2, p3];
    internal static string DurationIsNegative(object p0) => Instance["DurationIsNegative", p0];
    internal static string DynamicActivityDuplicatePropertyDetected(object p0) => Instance["DynamicActivityDuplicatePropertyDetected", p0];
    internal static string DynamicActivityMultipleExpressionLanguages(object p0) => Instance["DynamicActivityMultipleExpressionLanguages", p0];
    internal static string EmptyGuidOnDeserializedInstance => Instance["EmptyGuidOnDeserializedInstance"];
    internal static string EmptyIdReturnedFromHost(object p0) => Instance["EmptyIdReturnedFromHost", p0];
    internal static string EnvironmentDisposed => Instance["EnvironmentDisposed"];
    internal static string ErrorExtractingValuesForLambdaRewrite(object p0, object p1, object p2) => Instance["ErrorExtractingValuesForLambdaRewrite", p0, p1, p2];
    internal static string ErrorsEncounteredWhileProcessingTree => Instance["ErrorsEncounteredWhileProcessingTree"];
    internal static string ExclusiveHandleRegisterBookmarkScopeFailed => Instance["ExclusiveHandleRegisterBookmarkScopeFailed"];
    internal static string ExclusiveHandleReinitializeFailed => Instance["ExclusiveHandleReinitializeFailed"];
    internal static string ExecuteMustBeNested => Instance["ExecuteMustBeNested"];
    internal static string ExecutionPropertyAlreadyDefined(object p0) => Instance["ExecutionPropertyAlreadyDefined", p0];
    internal static string ExpressionRequiredForConversion => Instance["ExpressionRequiredForConversion"];
    internal static string ExpressionTamperedSinceLastCompiled(object p0) => Instance["ExpressionTamperedSinceLastCompiled", p0];
    internal static string ExtensionsCannotBeModified => Instance["ExtensionsCannotBeModified"];
    internal static string ExternalLocationsGetOnly => Instance["ExternalLocationsGetOnly"];
    internal static string ExtraOverloadGroupPropertiesConfigured(object p0, object p1, object p2) => Instance["ExtraOverloadGroupPropertiesConfigured", p0, p1, p2];
    internal static string FailFastMessage(object p0) => Instance["FailFastMessage", p0];
    internal static string FaultContextNotFound(object p0) => Instance["FaultContextNotFound", p0];
    internal static string FinalStateCannotHaveProperty(object p0, object p1) => Instance["FinalStateCannotHaveProperty", p0, p1];
    internal static string FinalStateCannotHaveTransition(object p0) => Instance["FinalStateCannotHaveTransition", p0];
    public static string FlowchartContainsUnconnectedNodes(object p0) => Instance["FlowchartContainsUnconnectedNodes", p0];
    public static string FlowchartMissingStartNode(object p0) => Instance["FlowchartMissingStartNode", p0];
    public static string FlowDecisionRequiresCondition(object p0) => Instance["FlowDecisionRequiresCondition", p0];
    internal static string FlowNodeCannotBeShared(object p0, object p1) => Instance["FlowNodeCannotBeShared", p0, p1];
    public static string FlowSwitchRequiresExpression(object p0) => Instance["FlowSwitchRequiresExpression", p0];
    internal static string ForEachRequiresNonNullValues(object p0) => Instance["ForEachRequiresNonNullValues", p0];
    internal static string GenericInstanceCommand(object p0) => Instance["GenericInstanceCommand", p0];
    internal static string GenericInstanceCommandNull => Instance["GenericInstanceCommandNull"];
    internal static string GetLocationOnPublicAccessReference(object p0) => Instance["GetLocationOnPublicAccessReference", p0];
    internal static string GetRunnableRequiresOwner => Instance["GetRunnableRequiresOwner"];
    internal static string GuidCannotBeEmpty => Instance["GuidCannotBeEmpty"];
    internal static string HandleFreed => Instance["HandleFreed"];
    internal static string HandleFreedBeforeInitialized => Instance["HandleFreedBeforeInitialized"];
    internal static string HandleInitializationContextDisposed => Instance["HandleInitializationContextDisposed"];
    internal static string HandleNotInitialized => Instance["HandleNotInitialized"];
    internal static string HostIdDoesNotMatchInstance(object p0, object p1) => Instance["HostIdDoesNotMatchInstance", p0, p1];
    internal static string IdentityControlCharacter => Instance["IdentityControlCharacter"];
    internal static string IdentityNameSemicolon => Instance["IdentityNameSemicolon"];
    internal static string IdentityWhitespace => Instance["IdentityWhitespace"];
    internal static string IdNotFoundInWorkflow(object p0) => Instance["IdNotFoundInWorkflow", p0];
    internal static string ImplementationVersionMismatch(object p0, object p1, object p2) => Instance["ImplementationVersionMismatch", p0, p1, p2];
    internal static string IncompatibleTypeForMultidimensionalArrayItemReference(object p0, object p1) => Instance["IncompatibleTypeForMultidimensionalArrayItemReference", p0, p1];
    internal static string IndicesAreNeeded(object p0, object p1) => Instance["IndicesAreNeeded", p0, p1];
    internal static string InitializationIncomplete => Instance["InitializationIncomplete"];
    internal static string InitialMetadataCannotBeDeleted(object p0) => Instance["InitialMetadataCannotBeDeleted", p0];
    internal static string InitialStateCannotBeFinalState(object p0) => Instance["InitialStateCannotBeFinalState", p0];
    internal static string InitialStateNotInStatesCollection(object p0) => Instance["InitialStateNotInStatesCollection", p0];
    internal static string InlinedLocationReferenceOnlyAccessibleByOwner(object p0, object p1) => Instance["InlinedLocationReferenceOnlyAccessibleByOwner", p0, p1];
    internal static string InputParametersCountMismatch(object p0, object p1) => Instance["InputParametersCountMismatch", p0, p1];
    internal static string InputParametersMissing(object p0) => Instance["InputParametersMissing", p0];
    internal static string InputParametersTypeMismatch(object p0, object p1) => Instance["InputParametersTypeMismatch", p0, p1];
    internal static string InstanceCollisionDefault => Instance["InstanceCollisionDefault"];
    internal static string InstanceCollisionSpecific(object p0) => Instance["InstanceCollisionSpecific", p0];
    internal static string InstanceCompleteDefault => Instance["InstanceCompleteDefault"];
    internal static string InstanceCompleteSpecific(object p0) => Instance["InstanceCompleteSpecific", p0];
    internal static string InstanceHandleConflictDefault => Instance["InstanceHandleConflictDefault"];
    internal static string InstanceHandleConflictSpecific(object p0) => Instance["InstanceHandleConflictSpecific", p0];
    internal static string InstanceKeyRequiresValidGuid => Instance["InstanceKeyRequiresValidGuid"];
    internal static string InstanceLockLostDefault => Instance["InstanceLockLostDefault"];
    internal static string InstanceLockLostSpecific(object p0) => Instance["InstanceLockLostSpecific", p0];
    internal static string InstanceMethodCallRequiresTargetObject => Instance["InstanceMethodCallRequiresTargetObject"];
    internal static string InstanceNotReadyDefault => Instance["InstanceNotReadyDefault"];
    internal static string InstanceNotReadySpecific(object p0) => Instance["InstanceNotReadySpecific", p0];
    internal static string InstanceOperationRequiresInstance => Instance["InstanceOperationRequiresInstance"];
    internal static string InstanceOperationRequiresLock => Instance["InstanceOperationRequiresLock"];
    internal static string InstanceOperationRequiresNotCompleted => Instance["InstanceOperationRequiresNotCompleted"];
    internal static string InstanceOperationRequiresNotUninitialized => Instance["InstanceOperationRequiresNotUninitialized"];
    internal static string InstanceOperationRequiresOwner => Instance["InstanceOperationRequiresOwner"];
    internal static string InstanceOwnerDefault => Instance["InstanceOwnerDefault"];
    internal static string InstanceOwnerSpecific(object p0) => Instance["InstanceOwnerSpecific", p0];
    internal static string InstanceRequired => Instance["InstanceRequired"];
    internal static string InstanceStoreBoundSameVersionTwice => Instance["InstanceStoreBoundSameVersionTwice"];
    internal static string InstanceStoreDoesntMatchWorkflowApplication => Instance["InstanceStoreDoesntMatchWorkflowApplication"];
    internal static string InstanceStoreHasDefaultOwner => Instance["InstanceStoreHasDefaultOwner"];
    internal static string InstanceStoreRequiredToPersist => Instance["InstanceStoreRequiredToPersist"];
    internal static string InsufficientArraySize(object p0) => Instance["InsufficientArraySize", p0];
    internal static string InternalConstraintException(object p0, object p1, object p2, object p3) => Instance["InternalConstraintException", p0, p1, p2, p3];
    internal static string InvalidActivityIdFormat => Instance["InvalidActivityIdFormat"];
    internal static string InvalidAsyncResult => Instance["InvalidAsyncResult"];
    internal static string InvalidAsyncResultImplementation(object p0) => Instance["InvalidAsyncResultImplementation", p0];
    internal static string InvalidAsyncResultImplementationGeneric => Instance["InvalidAsyncResultImplementationGeneric"];
    internal static string InvalidCompensateActivityUsage(object p0) => Instance["InvalidCompensateActivityUsage", p0];
    internal static string InvalidCompensationToken(object p0) => Instance["InvalidCompensationToken", p0];
    internal static string InvalidConfirmActivityUsage(object p0) => Instance["InvalidConfirmActivityUsage", p0];
    internal static string InvalidDynamicActivityProperty(object p0) => Instance["InvalidDynamicActivityProperty", p0];
    internal static string InvalidEvaluationOrderValue => Instance["InvalidEvaluationOrderValue"];
    internal static string InvalidExecutionCallback(object p0, object p1) => Instance["InvalidExecutionCallback", p0, p1];
    internal static string InvalidExpressionForLocation(object p0) => Instance["InvalidExpressionForLocation", p0];
    internal static string InvalidExpressionProperty(object p0) => Instance["InvalidExpressionProperty", p0];
    internal static string InvalidGenericTypeInfo(object p0) => Instance["InvalidGenericTypeInfo", p0];
    internal static string InvalidIdleAction => Instance["InvalidIdleAction"];
    internal static string InvalidInstanceState => Instance["InvalidInstanceState"];
    internal static string InvalidKeyArgument => Instance["InvalidKeyArgument"];
    internal static string InvalidLocationExpression => Instance["InvalidLocationExpression"];
    internal static string InvalidLockToken => Instance["InvalidLockToken"];
    internal static string InvalidLValueExpression => Instance["InvalidLValueExpression"];
    internal static string InvalidNullAsyncResult => Instance["InvalidNullAsyncResult"];
    internal static string InvalidParameterInfo(object p0, object p1) => Instance["InvalidParameterInfo", p0, p1];
    internal static string InvalidPrepareForRuntimeValidationSettings => Instance["InvalidPrepareForRuntimeValidationSettings"];
    internal static string InvalidProperty(object p0) => Instance["InvalidProperty", p0];
    internal static string InvalidPropertyType(object p0, object p1) => Instance["InvalidPropertyType", p0, p1];
    internal static string InvalidRuntimeState => Instance["InvalidRuntimeState"];
    internal static string InvalidSemaphoreExit => Instance["InvalidSemaphoreExit"];
    internal static string InvalidSourceLocationColumn(object p0, object p1) => Instance["InvalidSourceLocationColumn", p0, p1];
    internal static string InvalidSourceLocationLineNumber(object p0, object p1) => Instance["InvalidSourceLocationLineNumber", p0, p1];
    internal static string InvalidTypeConverterUsage => Instance["InvalidTypeConverterUsage"];
    internal static string InvalidUnhandledExceptionAction => Instance["InvalidUnhandledExceptionAction"];
    internal static string InvalidVisualBasicSettingsValue => Instance["InvalidVisualBasicSettingsValue"];
    internal static string InvalidXamlMember(object p0) => Instance["InvalidXamlMember", p0];
    internal static string IsolationLevelValidation => Instance["IsolationLevelValidation"];
    internal static string ITextExpressionParameterMustBeActivity => Instance["ITextExpressionParameterMustBeActivity"];
    internal static string KeyAlreadyAssociated => Instance["KeyAlreadyAssociated"];
    internal static string KeyAlreadyCompleted => Instance["KeyAlreadyCompleted"];
    internal static string KeyAlreadyUnassociated => Instance["KeyAlreadyUnassociated"];
    internal static string KeyCollectionUpdatesNotAllowed => Instance["KeyCollectionUpdatesNotAllowed"];
    internal static string KeyCollisionDefault => Instance["KeyCollisionDefault"];
    internal static string KeyCollisionSpecific(object p0, object p1, object p2) => Instance["KeyCollisionSpecific", p0, p1, p2];
    internal static string KeyCollisionSpecificKeyOnly(object p0) => Instance["KeyCollisionSpecificKeyOnly", p0];
    internal static string KeyCompleteDefault => Instance["KeyCompleteDefault"];
    internal static string KeyCompleteSpecific(object p0) => Instance["KeyCompleteSpecific", p0];
    internal static string KeyNotAssociated => Instance["KeyNotAssociated"];
    internal static string KeyNotCompleted => Instance["KeyNotCompleted"];
    internal static string KeyNotReadyDefault => Instance["KeyNotReadyDefault"];
    internal static string KeyNotReadySpecific(object p0) => Instance["KeyNotReadySpecific", p0];
    internal static string LambdaExpressionReturnTypeInvalid => Instance["LambdaExpressionReturnTypeInvalid"];
    internal static string LambdaExpressionTypeRequired => Instance["LambdaExpressionTypeRequired"];
    internal static string LambdaNotXamlSerializable => Instance["LambdaNotXamlSerializable"];
    internal static string LiteralsMustBeValueTypesOrImmutableTypes(object p0, object p1) => Instance["LiteralsMustBeValueTypesOrImmutableTypes", p0, p1];
    internal static string LoadedWriteOnlyValue => Instance["LoadedWriteOnlyValue"];
    internal static string LoadingWorkflowApplicationRequiresInstanceStore => Instance["LoadingWorkflowApplicationRequiresInstanceStore"];
    internal static string LoadOpAssociateKeysCannotContainLookupKey => Instance["LoadOpAssociateKeysCannotContainLookupKey"];
    internal static string LoadOpFreeKeyRequiresAcceptUninitialized => Instance["LoadOpFreeKeyRequiresAcceptUninitialized"];
    internal static string LoadOpKeyMustBeValid => Instance["LoadOpKeyMustBeValid"];
    internal static string LocationExpressionCouldNotBeResolved(object p0) => Instance["LocationExpressionCouldNotBeResolved", p0];
    internal static string LocationTypeMismatch(object p0, object p1, object p2) => Instance["LocationTypeMismatch", p0, p1, p2];
    internal static string MarkCanceledOnlyCallableIfCancelRequested => Instance["MarkCanceledOnlyCallableIfCancelRequested"];
    internal static string MayBindLockCommandShouldValidateOwner => Instance["MayBindLockCommandShouldValidateOwner"];
    internal static string MemberCannotBeNull(object p0, object p1, object p2) => Instance["MemberCannotBeNull", p0, p1, p2];
    internal static string MemberIsReadOnly(object p0, object p1) => Instance["MemberIsReadOnly", p0, p1];
    internal static string MemberNotFound(object p0, object p1) => Instance["MemberNotFound", p0, p1];
    internal static string MemberNotSupportedByActivityXamlServices(object p0) => Instance["MemberNotSupportedByActivityXamlServices", p0];
    internal static string MetadataCannotContainNullKey => Instance["MetadataCannotContainNullKey"];
    internal static string MetadataCannotContainNullValue(object p0) => Instance["MetadataCannotContainNullValue", p0];
    internal static string MethodInfoRequired(object p0) => Instance["MethodInfoRequired", p0];
    internal static string MethodNameRequired(object p0) => Instance["MethodNameRequired", p0];
    internal static string MissingArgument(object p0, object p1) => Instance["MissingArgument", p0, p1];
    internal static string MissingNameProperty(object p0) => Instance["MissingNameProperty", p0];
    internal static string MissingSetAccessorForIndexer(object p0, object p1) => Instance["MissingSetAccessorForIndexer", p0, p1];
    internal static string MultipleOverloadGroupsConfigured(object p0) => Instance["MultipleOverloadGroupsConfigured", p0];
    internal static string MustCancelOldTimer => Instance["MustCancelOldTimer"];
    internal static string MustMatchReferenceExpressionReturnType => Instance["MustMatchReferenceExpressionReturnType"];
    internal static string NameCollisionOnCollect(object p0, object p1) => Instance["NameCollisionOnCollect", p0, p1];
    internal static string NameCollisionOnMap(object p0, object p1) => Instance["NameCollisionOnMap", p0, p1];
    internal static string NewArrayBoundsRequiresIntegralArguments => Instance["NewArrayBoundsRequiresIntegralArguments"];
    internal static string NewArrayRequiresArrayTypeAsResultType => Instance["NewArrayRequiresArrayTypeAsResultType"];
    internal static string NoCAInSecondaryRoot => Instance["NoCAInSecondaryRoot"];
    internal static string NoOutputLocationWasFound(object p0) => Instance["NoOutputLocationWasFound", p0];
    internal static string NoOverloadGroupsAreConfigured => Instance["NoOverloadGroupsAreConfigured"];
    internal static string NoPersistScopeCannotContainPersist(object p0, object p1) => Instance["NoPersistScopeCannotContainPersist", p0, p1];
    internal static string NoRunnableInstances => Instance["NoRunnableInstances"];
    internal static string NoRuntimeTransactionExists => Instance["NoRuntimeTransactionExists"];
    internal static string NullKeyAlreadyPresent => Instance["NullKeyAlreadyPresent"];
    internal static string NullReferencedMemberAccess(object p0, object p1) => Instance["NullReferencedMemberAccess", p0, p1];
    internal static string OnCancelRequestedThrew => Instance["OnCancelRequestedThrew"];
    internal static string OneOfTwoPropertiesMustBeSet(object p0, object p1, object p2, object p3) => Instance["OneOfTwoPropertiesMustBeSet", p0, p1, p2, p3];
    internal static string OnFreeInstanceHandleThrew => Instance["OnFreeInstanceHandleThrew"];
    internal static string OnlyBookmarkOwnerCanRemove => Instance["OnlyBookmarkOwnerCanRemove"];
    internal static string OnlyOneOperationPerActivity => Instance["OnlyOneOperationPerActivity"];
    internal static string OnlyOneRequireTransactionContextAllowed => Instance["OnlyOneRequireTransactionContextAllowed"];
    internal static string OnlySingleCastDelegatesAllowed => Instance["OnlySingleCastDelegatesAllowed"];
    internal static string OperationAlreadyCompleted => Instance["OperationAlreadyCompleted"];
    internal static string OriginCannotBeRuntimeIntrinsic(object p0) => Instance["OriginCannotBeRuntimeIntrinsic", p0];
    internal static string OutOfIdSpaceIds => Instance["OutOfIdSpaceIds"];
    internal static string OutOfInstanceIds => Instance["OutOfInstanceIds"];
    internal static string OutOfInternalBookmarks => Instance["OutOfInternalBookmarks"];
    internal static string OutOfRangeSourceLocationEndColumn(object p0) => Instance["OutOfRangeSourceLocationEndColumn", p0];
    internal static string OutOfRangeSourceLocationEndLine(object p0) => Instance["OutOfRangeSourceLocationEndLine", p0];
    internal static string OutsideInstanceExecutionScope(object p0) => Instance["OutsideInstanceExecutionScope", p0];
    internal static string OverloadGroupHasSubsets(object p0, object p1) => Instance["OverloadGroupHasSubsets", p0, p1];
    internal static string OverloadGroupsAreEquivalent(object p0) => Instance["OverloadGroupsAreEquivalent", p0];
    internal static string OverloadingMethodMustBeStatic => Instance["OverloadingMethodMustBeStatic"];
    internal static string OwnerBelongsToWrongStore => Instance["OwnerBelongsToWrongStore"];
    internal static string OwnerRequired => Instance["OwnerRequired"];
    internal static string ParallelForEachRequiresNonNullValues(object p0) => Instance["ParallelForEachRequiresNonNullValues", p0];
    internal static string PauseWhenPersistableInvalidIfPersistable => Instance["PauseWhenPersistableInvalidIfPersistable"];
    internal static string PersistencePipelineAbortThrew(object p0) => Instance["PersistencePipelineAbortThrew", p0];
    internal static string PickBranchRequiresTrigger(object p0) => Instance["PickBranchRequiresTrigger", p0];
    internal static string PrepareForSerializationRequiresPersistability => Instance["PrepareForSerializationRequiresPersistability"];
    internal static string PropertyMemberNotSupportedByActivityXamlServices(object p0) => Instance["PropertyMemberNotSupportedByActivityXamlServices", p0];
    internal static string PropertyReadOnlyInWorkflowDataContext(object p0) => Instance["PropertyReadOnlyInWorkflowDataContext", p0];
    internal static string PropertyReferenceNotFound(object p0) => Instance["PropertyReferenceNotFound", p0];
    internal static string ProviderDoesNotSupportCommand(object p0) => Instance["ProviderDoesNotSupportCommand", p0];
    internal static string PublicMethodWithMatchingParameterDoesNotExist(object p0, object p1, object p2, object p3) => Instance["PublicMethodWithMatchingParameterDoesNotExist", p0, p1, p2, p3];
    internal static string PublicReferencesOnActivityRequiringArgumentResolution(object p0) => Instance["PublicReferencesOnActivityRequiringArgumentResolution", p0];
    internal static string ReadAccessToWriteOnlyPublicReference(object p0) => Instance["ReadAccessToWriteOnlyPublicReference", p0];
    internal static string ReadonlyPropertyCannotBeSet(object p0, object p1) => Instance["ReadonlyPropertyCannotBeSet", p0, p1];
    internal static string RegisteredBookmarkScopeRequired => Instance["RegisteredBookmarkScopeRequired"];
    internal static string RequiredArgumentValueNotSupplied(object p0) => Instance["RequiredArgumentValueNotSupplied", p0];
    internal static string RequiredExtensionTypeNotFound(object p0) => Instance["RequiredExtensionTypeNotFound", p0];
    internal static string RequireExtensionOnlyAcceptsReferenceTypes(object p0) => Instance["RequireExtensionOnlyAcceptsReferenceTypes", p0];
    internal static string ResultArgumentHasRequiredTypeAndDirection(object p0, object p1, object p2) => Instance["ResultArgumentHasRequiredTypeAndDirection", p0, p1, p2];
    internal static string ResultArgumentMustBeBoundToResultProperty => Instance["ResultArgumentMustBeBoundToResultProperty"];
    internal static string ResultArgumentMustBeSpecificType(object p0) => Instance["ResultArgumentMustBeSpecificType", p0];
    internal static string ResultCannotBeSetOnArgumentExpressions => Instance["ResultCannotBeSetOnArgumentExpressions"];
    internal static string RethrowMustBeAPublicChild(object p0) => Instance["RethrowMustBeAPublicChild", p0];
    internal static string RethrowNotInATryCatch(object p0) => Instance["RethrowNotInATryCatch", p0];
    internal static string ReturnTypeIncompatible(object p0, object p1, object p2, object p3, object p4) => Instance["ReturnTypeIncompatible", p0, p1, p2, p3, p4];
    internal static string RootActivityAlreadyAssociatedWithInstance(object p0) => Instance["RootActivityAlreadyAssociatedWithInstance", p0];
    internal static string RootActivityCannotBeReferenced(object p0, object p1) => Instance["RootActivityCannotBeReferenced", p0, p1];
    internal static string RootArgumentViolationsFound => Instance["RootArgumentViolationsFound"];
    internal static string RootArgumentViolationsFoundNoInputs => Instance["RootArgumentViolationsFoundNoInputs"];
    internal static string RuntimeArgumentBindingInvalid(object p0, object p1) => Instance["RuntimeArgumentBindingInvalid", p0, p1];
    internal static string RuntimeArgumentNotCreated => Instance["RuntimeArgumentNotCreated"];
    internal static string RuntimeArgumentNotOpen(object p0) => Instance["RuntimeArgumentNotOpen", p0];
    internal static string RuntimeDelegateArgumentDirectionIncorrect => Instance["RuntimeDelegateArgumentDirectionIncorrect"];
    internal static string RuntimeDelegateArgumentTypeIncorrect => Instance["RuntimeDelegateArgumentTypeIncorrect"];
    internal static string RuntimeOperationInProgress => Instance["RuntimeOperationInProgress"];
    internal static string RuntimeRunning => Instance["RuntimeRunning"];
    internal static string RuntimeTransactionAlreadyExists => Instance["RuntimeTransactionAlreadyExists"];
    internal static string RuntimeTransactionHandleNotRegisteredAsExecutionProperty(object p0) => Instance["RuntimeTransactionHandleNotRegisteredAsExecutionProperty", p0];
    internal static string RuntimeTransactionIsSuppressed => Instance["RuntimeTransactionIsSuppressed"];
    internal static string SameUserStateUsedForMultipleInvokes => Instance["SameUserStateUsedForMultipleInvokes"];
    internal static string SavingActivityToXamlNotSupported => Instance["SavingActivityToXamlNotSupported"];
    internal static string SavingFuncToXamlNotSupported => Instance["SavingFuncToXamlNotSupported"];
    internal static string SchemaContextFromBeforeInitializeComponentXBTExtensionCannotBeGeneric(object p0) => Instance["SchemaContextFromBeforeInitializeComponentXBTExtensionCannotBeGeneric", p0];
    internal static string SchemaContextFromBeforeInitializeComponentXBTExtensionNotFound(object p0) => Instance["SchemaContextFromBeforeInitializeComponentXBTExtensionNotFound", p0];
    internal static string SendNotSupported => Instance["SendNotSupported"];
    internal static string SetupOrCleanupWorkflowThreadThrew => Instance["SetupOrCleanupWorkflowThreadThrew"];
    internal static string ShipAssertExceptionMessage(object p0) => Instance["ShipAssertExceptionMessage", p0];
    internal static string SimpleStateMustHaveOneTransition(object p0) => Instance["SimpleStateMustHaveOneTransition", p0];
    internal static string SpecialMethodNotFound(object p0, object p1) => Instance["SpecialMethodNotFound", p0, p1];
    internal static string StateCannotBeAddedTwice(object p0) => Instance["StateCannotBeAddedTwice", p0];
    internal static string StateCannotBeSerialized(object p0) => Instance["StateCannotBeSerialized", p0];
    internal static string StateMachineMustHaveInitialState(object p0) => Instance["StateMachineMustHaveInitialState", p0];
    internal static string StateNotBelongToAnyParent(object p0, object p1) => Instance["StateNotBelongToAnyParent", p0, p1];
    internal static string StoreReportedConflictingLockTokens => Instance["StoreReportedConflictingLockTokens"];
    internal static string SubexpressionResultWasNotVisible(object p0) => Instance["SubexpressionResultWasNotVisible", p0];
    internal static string SubexpressionResultWasNull(object p0) => Instance["SubexpressionResultWasNull", p0];
    internal static string SymbolNamesMustBeUnique(object p0) => Instance["SymbolNamesMustBeUnique", p0];
    internal static string SymbolResolverAlreadyExists => Instance["SymbolResolverAlreadyExists"];
    internal static string SymbolResolverDoesNotHaveSymbol(object p0, object p1) => Instance["SymbolResolverDoesNotHaveSymbol", p0, p1];
    internal static string SymbolResolverMustBeSingleton => Instance["SymbolResolverMustBeSingleton"];
    internal static string TargetTypeAndTargetObjectAreMutuallyExclusive(object p0, object p1) => Instance["TargetTypeAndTargetObjectAreMutuallyExclusive", p0, p1];
    internal static string TargetTypeCannotBeEnum(object p0, object p1) => Instance["TargetTypeCannotBeEnum", p0, p1];
    internal static string TargetTypeIsValueType(object p0, object p1) => Instance["TargetTypeIsValueType", p0, p1];
    internal static string TextExpressionCompilerActivityNameRequired => Instance["TextExpressionCompilerActivityNameRequired"];
    internal static string TextExpressionCompilerActivityRequired => Instance["TextExpressionCompilerActivityRequired"];
    internal static string TextExpressionCompilerLanguageRequired => Instance["TextExpressionCompilerLanguageRequired"];
    internal static string TextExpressionCompilerUnableToLoadAssembly(object p0) => Instance["TextExpressionCompilerUnableToLoadAssembly", p0];
    internal static string TextExpressionMetadataRequiresCompilation(object p0) => Instance["TextExpressionMetadataRequiresCompilation", p0];
    internal static string TimedOutWaitingForLockResolution => Instance["TimedOutWaitingForLockResolution"];
    internal static string TimeoutMustBeNonNegative(object p0, object p1) => Instance["TimeoutMustBeNonNegative", p0, p1];
    internal static string TimeoutMustBePositive(object p0, object p1) => Instance["TimeoutMustBePositive", p0, p1];
    internal static string TimeoutOnOperation(object p0) => Instance["TimeoutOnOperation", p0];
    internal static string TimerExtensionAlreadyAttached => Instance["TimerExtensionAlreadyAttached"];
    internal static string TooManyViolationsForExceptionMessage => Instance["TooManyViolationsForExceptionMessage"];
    internal static string TrackingRelatedWorkflowAbort => Instance["TrackingRelatedWorkflowAbort"];
    internal static string TransitionCannotBeAddedTwice(object p0, object p1, object p2) => Instance["TransitionCannotBeAddedTwice", p0, p1, p2];
    internal static string TransitionTargetCannotBeNull(object p0, object p1) => Instance["TransitionTargetCannotBeNull", p0, p1];
    internal static string TryCommandCannotExecuteSubCommandsAndReduce => Instance["TryCommandCannotExecuteSubCommandsAndReduce"];
    internal static string TryLoadRequiresOwner => Instance["TryLoadRequiresOwner"];
    internal static string TypeConverterHelperCacheAddFailed(object p0) => Instance["TypeConverterHelperCacheAddFailed", p0];
    internal static string TypeMismatchForAssign(object p0, object p1, object p2) => Instance["TypeMismatchForAssign", p0, p1, p2];
    internal static string TypeMustbeValueType(object p0) => Instance["TypeMustbeValueType", p0];
    internal static string UnableToLocateCompiledLocationContext(object p0) => Instance["UnableToLocateCompiledLocationContext", p0];
    internal static string UnconditionalTransitionShouldNotShareNullTriggersWithOthers(object p0, object p1) => Instance["UnconditionalTransitionShouldNotShareNullTriggersWithOthers", p0, p1];
    internal static string UnconditionalTransitionShouldNotShareTriggersWithOthers(object p0, object p1, object p2) => Instance["UnconditionalTransitionShouldNotShareTriggersWithOthers", p0, p1, p2];
    internal static string UnexpectedExpressionNodeType(object p0, object p1) => Instance["UnexpectedExpressionNodeType", p0, p1];
    internal static string UninitializedCannotHaveData => Instance["UninitializedCannotHaveData"];
    internal static string UnInitializedRuntimeTransactionHandle => Instance["UnInitializedRuntimeTransactionHandle"];
    internal static string UnmatchedNoPersistExit => Instance["UnmatchedNoPersistExit"];
    internal static string UnsupportedExpressionType(object p0) => Instance["UnsupportedExpressionType", p0];
    internal static string UnsupportedLocationReferenceValue => Instance["UnsupportedLocationReferenceValue"];
    internal static string UnsupportedMemberExpressionWithType(object p0) => Instance["UnsupportedMemberExpressionWithType", p0];
    internal static string UnsupportedReferenceExpressionType(object p0) => Instance["UnsupportedReferenceExpressionType", p0];
    internal static string UnusedInputArguments(object p0) => Instance["UnusedInputArguments", p0];
    internal static string ValidateUnlockInstance => Instance["ValidateUnlockInstance"];
    internal static string ValidationContextCannotBeNull(object p0, object p1) => Instance["ValidationContextCannotBeNull", p0, p1];
    internal static string ValidationErrorPrefixForHiddenActivity(object p0) => Instance["ValidationErrorPrefixForHiddenActivity", p0];
    internal static string ValidationErrorPrefixForPublicActivityWithHiddenParent(object p0, object p1) => Instance["ValidationErrorPrefixForPublicActivityWithHiddenParent", p0, p1];
    internal static string ValueCollectionUpdatesNotAllowed => Instance["ValueCollectionUpdatesNotAllowed"];
    internal static string ValueMustBeAssignableToType => Instance["ValueMustBeAssignableToType"];
    internal static string VariableAlreadyInUseOnActivity(object p0, object p1, object p2) => Instance["VariableAlreadyInUseOnActivity", p0, p1, p2];
    internal static string VariableDoesNotExist(object p0) => Instance["VariableDoesNotExist", p0];
    internal static string VariableExpressionTypeMismatch(object p0, object p1, object p2) => Instance["VariableExpressionTypeMismatch", p0, p1, p2];
    internal static string VariableIsReadOnly(object p0) => Instance["VariableIsReadOnly", p0];
    internal static string VariableMustBeSet => Instance["VariableMustBeSet"];
    internal static string VariableNotOpen(object p0, object p1) => Instance["VariableNotOpen", p0, p1];
    internal static string VariableNotVisible(object p0) => Instance["VariableNotVisible", p0];
    internal static string VariableOnlyAccessibleAtScopeOfDeclaration(object p0, object p1) => Instance["VariableOnlyAccessibleAtScopeOfDeclaration", p0, p1];
    internal static string VariableShouldBeOpen(object p0) => Instance["VariableShouldBeOpen", p0];
    internal static string VariableTypeInvalid(object p0, object p1, object p2) => Instance["VariableTypeInvalid", p0, p1, p2];
    internal static string WaitAlreadyInProgress => Instance["WaitAlreadyInProgress"];
    internal static string WaitForEventsTimedOut(object p0) => Instance["WaitForEventsTimedOut", p0];
    internal static string WDCDisposed => Instance["WDCDisposed"];
    internal static string WhileRequiresCondition(object p0) => Instance["WhileRequiresCondition", p0];
    internal static string WorkflowAbortedReason(object p0, object p1) => Instance["WorkflowAbortedReason", p0, p1];
    internal static string WorkflowApplicationAborted(object p0) => Instance["WorkflowApplicationAborted", p0];
    internal static string WorkflowApplicationAlreadyHasId => Instance["WorkflowApplicationAlreadyHasId"];
    internal static string WorkflowApplicationCompleted(object p0) => Instance["WorkflowApplicationCompleted", p0];
    internal static string WorkflowApplicationInstanceAbandoned => Instance["WorkflowApplicationInstanceAbandoned"];
    internal static string WorkflowApplicationInstanceLoaded => Instance["WorkflowApplicationInstanceLoaded"];
    internal static string WorkflowApplicationTerminated(object p0) => Instance["WorkflowApplicationTerminated", p0];
    internal static string WorkflowApplicationUnloaded(object p0) => Instance["WorkflowApplicationUnloaded", p0];
    internal static string WorkflowIdentityNullHostId(object p0) => Instance["WorkflowIdentityNullHostId", p0];
    internal static string WorkflowIdentityNullStateId(object p0) => Instance["WorkflowIdentityNullStateId", p0];
    internal static string WorkflowIdentityStateIdHostIdMismatch(object p0, object p1) => Instance["WorkflowIdentityStateIdHostIdMismatch", p0, p1];
    internal static string WorkflowInstanceAborted(object p0) => Instance["WorkflowInstanceAborted", p0];
    internal static string WorkflowInstanceIsReadOnly(object p0) => Instance["WorkflowInstanceIsReadOnly", p0];
    internal static string WorkflowInstanceNotFoundInStore(object p0) => Instance["WorkflowInstanceNotFoundInStore", p0];
    internal static string WorkflowTerminatedExceptionDefaultMessage => Instance["WorkflowTerminatedExceptionDefaultMessage"];
    internal static string WorkItemAbortedInstance => Instance["WorkItemAbortedInstance"];
    internal static string WriteAccessToReadOnlyPublicReference(object p0) => Instance["WriteAccessToReadOnlyPublicReference", p0];
    internal static string WriteonlyPropertyCannotBeRead(object p0, object p1) => Instance["WriteonlyPropertyCannotBeRead", p0, p1];
    internal static string WrongCacheMetadataForCodeActivity => Instance["WrongCacheMetadataForCodeActivity"];
    internal static string WrongCacheMetadataForNativeActivity => Instance["WrongCacheMetadataForNativeActivity"];
    internal static string WrongNumberOfArgumentsForActivityDelegate => Instance["WrongNumberOfArgumentsForActivityDelegate"];
    internal static string XamlBuildTaskResourceNotFound(object p0) => Instance["XamlBuildTaskResourceNotFound", p0];


#if DYNAMICUPDATE
    // These are all unused. Some of them are for dynamic update, but some may be used 
    // by components that were not ported from the .NET Framework version.

    internal static string AbortingDueToDynamicUpdateFailure => Instance["AbortingDueToDynamicUpdateFailure"];
    internal static string ActivityBlockingUpdate(object p0, object p1) => Instance["ActivityBlockingUpdate", p0, p1];
    internal static string ActivityDefinitionCannotBeShared(object p0) => Instance["ActivityDefinitionCannotBeShared", p0];
    internal static string ActivityDelegateAlreadyOpened(object p0, object p1, object p2) => Instance["ActivityDelegateAlreadyOpened", p0, p1, p2];
    internal static string ActivityDelegateNotOpened(object p0) => Instance["ActivityDelegateNotOpened", p0];
    internal static string ActivityDelegateOwnerEnvironmentMissing(object p0, object p1) => Instance["ActivityDelegateOwnerEnvironmentMissing", p0, p1];
    internal static string ActivityDelegateOwnerNotInParentScope(object p0, object p1) => Instance["ActivityDelegateOwnerNotInParentScope", p0, p1];
    internal static string ActivityFailedToOpenBefore => Instance["ActivityFailedToOpenBefore"];
    internal static string ActivityHasNoImplementation(object p0) => Instance["ActivityHasNoImplementation", p0];
    internal static string ActivityIsNotRoot => Instance["ActivityIsNotRoot"];
    internal static string ActivityMapIsCorrupt => Instance["ActivityMapIsCorrupt"];
    internal static string ActivityNotFound(object p0) => Instance["ActivityNotFound", p0];
    internal static string ActivityNotICompiledExpressionRoot => Instance["ActivityNotICompiledExpressionRoot"];
    internal static string ActivityPropertyNotSet(object p0, object p1) => Instance["ActivityPropertyNotSet", p0, p1];
    internal static string AddedIdleArgumentBlockDU(object p0, object p1) => Instance["AddedIdleArgumentBlockDU", p0, p1];
    internal static string AddedIdleExpressionBlockDU => Instance["AddedIdleExpressionBlockDU"];
    internal static string AddedIdleVariableDefaultBlockDU(object p0, object p1) => Instance["AddedIdleVariableDefaultBlockDU", p0, p1];
    internal static string AddMatchActivityNewAndOldParentMismatch(object p0, object p1, object p2, object p3) => Instance["AddMatchActivityNewAndOldParentMismatch", p0, p1, p2, p3];
    internal static string AddMatchActivityNewParentMismatch(object p0, object p1, object p2) => Instance["AddMatchActivityNewParentMismatch", p0, p1, p2];
    internal static string AddMatchActivityPrivateChild(object p0) => Instance["AddMatchActivityPrivateChild", p0];
    internal static string AddMatchVariableNewAndOldParentMismatch(object p0, object p1, object p2, object p3) => Instance["AddMatchVariableNewAndOldParentMismatch", p0, p1, p2, p3];
    internal static string AddMatchVariableNewParentMismatch(object p0, object p1, object p2) => Instance["AddMatchVariableNewParentMismatch", p0, p1, p2];
    internal static string AddMatchVariablePrivateChild(object p0) => Instance["AddMatchVariablePrivateChild", p0];
    internal static string AddMatchVariableSignatureMismatch(object p0, object p1, object p2, object p3, object p4, object p5, object p6) => Instance["AddMatchVariableSignatureMismatch", p0, p1, p2, p3, p4, p5, p6];
    internal static string AlreadySetupNoPersist => Instance["AlreadySetupNoPersist"];
    internal static string ArgumentAlreadyInitialized(object p0, object p1) => Instance["ArgumentAlreadyInitialized", p0, p1];
    internal static string ArgumentDoesNotExist(object p0) => Instance["ArgumentDoesNotExist", p0];
    internal static string ArgumentTypeCannotBeNull => Instance["ArgumentTypeCannotBeNull"];
    internal static string ArgumentViolationsFound(object p0, object p1) => Instance["ArgumentViolationsFound", p0, p1];
    internal static string AsyncEventArgsCompletedTwice(object p0) => Instance["AsyncEventArgsCompletedTwice", p0];
    internal static string AsyncEventArgsCompletionPending(object p0) => Instance["AsyncEventArgsCompletionPending", p0];
    internal static string AsyncMethodsMustAllBeStaticOrInstance => Instance["AsyncMethodsMustAllBeStaticOrInstance"];
    internal static string AsyncMethodsMustFromSameType => Instance["AsyncMethodsMustFromSameType"];
    internal static string BadCopyToArray => Instance["BadCopyToArray"];
    internal static string BlockedUpdateInsideActivityUpdateByUserError => Instance["BlockedUpdateInsideActivityUpdateByUserError"];
    internal static string BlockedUpdateInsideActivityUpdateError => Instance["BlockedUpdateInsideActivityUpdateError"];
    internal static string BookmarkNotFoundGeneric => Instance["BookmarkNotFoundGeneric"];
    internal static string BookmarkScopeNotFound(object p0) => Instance["BookmarkScopeNotFound", p0];
    internal static string BufferAllocationFailed(object p0) => Instance["BufferAllocationFailed", p0];
    internal static string BufferedOutputStreamQuotaExceeded(object p0) => Instance["BufferedOutputStreamQuotaExceeded", p0];
    internal static string BufferIsNotRightSizeForBufferManager => Instance["BufferIsNotRightSizeForBufferManager"];
    internal static string CannotAddHandlesUpdateError => Instance["CannotAddHandlesUpdateError"];
    internal static string CannotCallAbortInstanceFromWorkflowThread => Instance["CannotCallAbortInstanceFromWorkflowThread"];
    internal static string CannotChangeMatchesInImplementation => Instance["CannotChangeMatchesInImplementation"];
    internal static string CannotEnlistMultipleTransactions => Instance["CannotEnlistMultipleTransactions"];
    internal static string CannotGetValueOfOutArgument => Instance["CannotGetValueOfOutArgument"];
    internal static string CannotInvokeOpenedActivity => Instance["CannotInvokeOpenedActivity"];
    internal static string CannotInvokeTransactionalFromNonTransactional => Instance["CannotInvokeTransactionalFromNonTransactional"];
    internal static string CannotModifyCatchAfterOpen => Instance["CannotModifyCatchAfterOpen"];
    internal static string CannotMoveChildAcrossDifferentFlowNodeTypes => Instance["CannotMoveChildAcrossDifferentFlowNodeTypes"];
    internal static string CannotPersistInsideIsolation => Instance["CannotPersistInsideIsolation"];
    internal static string CannotPersistWhileDetached => Instance["CannotPersistWhileDetached"];
    internal static string CannotRemoveExecutingActivityUpdateError(object p0, object p1) => Instance["CannotRemoveExecutingActivityUpdateError", p0, p1];
    internal static string CannotReplaceTransaction => Instance["CannotReplaceTransaction"];
    internal static string CannotSaveOriginalValueForActivity => Instance["CannotSaveOriginalValueForActivity"];
    internal static string CannotSaveOriginalValueForNewActivity(object p0) => Instance["CannotSaveOriginalValueForNewActivity", p0];
    internal static string CannotSaveOriginalValuesForReferencedChildren => Instance["CannotSaveOriginalValuesForReferencedChildren"];
    internal static string CannotSerializeVariableExpression => Instance["CannotSerializeVariableExpression"];
    internal static string CannotSetupIsolationInsideIsolation => Instance["CannotSetupIsolationInsideIsolation"];
    internal static string CannotSetupIsolationInsideNoPersist => Instance["CannotSetupIsolationInsideNoPersist"];
    internal static string CannotSetupIsolationWithChildren => Instance["CannotSetupIsolationWithChildren"];
    internal static string CannotSetValueOfInArgument => Instance["CannotSetValueOfInArgument"];
    internal static string CannotUpdateEnvironmentInTheMiddleOfResolvingArguments => Instance["CannotUpdateEnvironmentInTheMiddleOfResolvingArguments"];
    internal static string CannotUpdateEnvironmentInTheMiddleOfResolvingVariables => Instance["CannotUpdateEnvironmentInTheMiddleOfResolvingVariables"];
    internal static string CannotWaitForIdleSynchronously => Instance["CannotWaitForIdleSynchronously"];
    internal static string CantFindTimerExtension => Instance["CantFindTimerExtension"];
    internal static string ChangeConditionalTransitionToUnconditionalBlockDU => Instance["ChangeConditionalTransitionToUnconditionalBlockDU"];
    internal static string ChangeTransitionTypeDuringTransitioningBlockDU => Instance["ChangeTransitionTypeDuringTransitioningBlockDU"];
    internal static string ChangingTriggerOrUseOriginalConditionActionBlockDU => Instance["ChangingTriggerOrUseOriginalConditionActionBlockDU"];
    internal static string ColumnNumberTooLarge(object p0) => Instance["ColumnNumberTooLarge", p0];
    internal static string CompiledExpressionIdNotFound(object p0) => Instance["CompiledExpressionIdNotFound", p0];
    internal static string CompiledLocationNoDefaultConstructor(object p0) => Instance["CompiledLocationNoDefaultConstructor", p0];
    internal static string CompletionConditionSetButNoBody(object p0) => Instance["CompletionConditionSetButNoBody", p0];
    internal static string CouldNotResolveNamespacePrefix(object p0) => Instance["CouldNotResolveNamespacePrefix", p0];
    internal static string CSharpExpressionsMustBeCompiled => Instance["CSharpExpressionsMustBeCompiled"];
    internal static string DebugInfoCannotEvaluateExpression(object p0) => Instance["DebugInfoCannotEvaluateExpression", p0];
    internal static string DebugInfoExceptionCaught(object p0, object p1) => Instance["DebugInfoExceptionCaught", p0, p1];
    internal static string DebugInfoNotSkipArgumentResolution => Instance["DebugInfoNotSkipArgumentResolution"];
    internal static string DebugInfoTryGetValueFailed => Instance["DebugInfoTryGetValueFailed"];
    internal static string DebugInstrumentationFailed(object p0) => Instance["DebugInstrumentationFailed", p0];
    internal static string DebugSymbolChecksumValueInvalid => Instance["DebugSymbolChecksumValueInvalid"];
    internal static string DelegateArgumentChangeBlockDU => Instance["DelegateArgumentChangeBlockDU"];
    internal static string DelegateParameterCannotBeModifiedAfterOpen(object p0) => Instance["DelegateParameterCannotBeModifiedAfterOpen", p0];
    internal static string DirectLambdaParameterReference => Instance["DirectLambdaParameterReference"];
    internal static string DoNotSupportArrayIndexerWithDifferentArrayTypeAndResultType(object p0, object p1) => Instance["DoNotSupportArrayIndexerWithDifferentArrayTypeAndResultType", p0, p1];
    internal static string DUActivityTypeMismatch(object p0, object p1) => Instance["DUActivityTypeMismatch", p0, p1];
    internal static string DUActivityTypeMismatchRuntime => Instance["DUActivityTypeMismatchRuntime"];
    internal static string DUDisallowIfCannotFindingMatchingCondition => Instance["DUDisallowIfCannotFindingMatchingCondition"];
    internal static string DuplicateAnnotationName(object p0) => Instance["DuplicateAnnotationName", p0];
    internal static string DuplicateImportAttribute(object p0, object p1) => Instance["DuplicateImportAttribute", p0, p1];
    internal static string DuplicateInstrumentation(object p0) => Instance["DuplicateInstrumentation", p0];
    internal static string DuplicateOriginActivityActivity(object p0, object p1, object p2) => Instance["DuplicateOriginActivityActivity", p0, p1, p2];
    internal static string DuplicateOriginActivityVariable(object p0, object p1, object p2) => Instance["DuplicateOriginActivityVariable", p0, p1, p2];
    internal static string DuplicateOriginVariableVariable(object p0, object p1, object p2) => Instance["DuplicateOriginVariableVariable", p0, p1, p2];
    internal static string DUTriggerOrConditionChangedDuringTransitioning => Instance["DUTriggerOrConditionChangedDuringTransitioning"];
    internal static string EnlistedTransactionPropertiesRequireIsolationBlocks => Instance["EnlistedTransactionPropertiesRequireIsolationBlocks"];
    internal static string EnumeratorNotStarted => Instance["EnumeratorNotStarted"];
    internal static string EtwAPIMaxStringCountExceeded(object p0) => Instance["EtwAPIMaxStringCountExceeded", p0];
    internal static string EtwMaxNumberArgumentsExceeded(object p0) => Instance["EtwMaxNumberArgumentsExceeded", p0];
    internal static string EtwRegistrationFailed(object p0) => Instance["EtwRegistrationFailed", p0];
    internal static string ExtensionsCannotBeSetByIndex => Instance["ExtensionsCannotBeSetByIndex"];
    internal static string FlowchartContainsReferences => Instance["FlowchartContainsReferences"];
    internal static string FlowNodeLockedForRuntime(object p0) => Instance["FlowNodeLockedForRuntime", p0];
    internal static string GeneratedAndProvidedMapConflict => Instance["GeneratedAndProvidedMapConflict"];
    internal static string GeneratedAndProvidedMapConflictRuntime => Instance["GeneratedAndProvidedMapConflictRuntime"];
    internal static string GetParameterTypeMismatch(object p0, object p1) => Instance["GetParameterTypeMismatch", p0, p1];
    internal static string HasExecutingChildrenNoPersist => Instance["HasExecutingChildrenNoPersist"];
    internal static string IncompatibleArgumentType(object p0, object p1) => Instance["IncompatibleArgumentType", p0, p1];
    internal static string IncorrectIndexForArgument(object p0, object p1, object p2) => Instance["IncorrectIndexForArgument", p0, p1, p2];
    internal static string IncorrectValueType(object p0, object p1) => Instance["IncorrectValueType", p0, p1];
    internal static string IndexOutOfBounds(object p0, object p1) => Instance["IndexOutOfBounds", p0, p1];
    internal static string InstanceMustBePaused => Instance["InstanceMustBePaused"];
    internal static string InstanceMustNotBePaused => Instance["InstanceMustNotBePaused"];
    internal static string InstanceStoreFailed => Instance["InstanceStoreFailed"];
    internal static string InvalidActivityToBlockUpdate(object p0) => Instance["InvalidActivityToBlockUpdate", p0];
    internal static string InvalidActivityToBlockUpdateServices(object p0) => Instance["InvalidActivityToBlockUpdateServices", p0];
    internal static string InvalidArgumentExpression(object p0, object p1) => Instance["InvalidArgumentExpression", p0, p1];
    internal static string InvalidAsyncBeginMethodSignature(object p0, object p1) => Instance["InvalidAsyncBeginMethodSignature", p0, p1];
    internal static string InvalidAsyncCancelMethodSignature(object p0, object p1) => Instance["InvalidAsyncCancelMethodSignature", p0, p1];
    internal static string InvalidAsyncEndMethodSignature(object p0, object p1) => Instance["InvalidAsyncEndMethodSignature", p0, p1];
    internal static string InvalidCallbackState(object p0) => Instance["InvalidCallbackState", p0];
    internal static string InvalidDirectionForArgument(object p0, object p1, object p2, object p3) => Instance["InvalidDirectionForArgument", p0, p1, p2, p3];
    internal static string InvalidFileName(object p0) => Instance["InvalidFileName", p0];
    internal static string InvalidImplementationAsWorkflowRoot => Instance["InvalidImplementationAsWorkflowRoot"];
    internal static string InvalidImplementationAsWorkflowRootForRuntimeState => Instance["InvalidImplementationAsWorkflowRootForRuntimeState"];
    internal static string InvalidImplementationAsWorkflowRootForRuntimeStateBecauseArgumentsChanged => Instance["InvalidImplementationAsWorkflowRootForRuntimeStateBecauseArgumentsChanged"];
    internal static string InvalidImplementationMap(object p0, object p1) => Instance["InvalidImplementationMap", p0, p1];
    internal static string InvalidImplementationMapAssociation(object p0) => Instance["InvalidImplementationMapAssociation", p0];
    internal static string InvalidImplementationMapAssociationServices(object p0) => Instance["InvalidImplementationMapAssociationServices", p0];
    internal static string InvalidImplementationMapRuntime => Instance["InvalidImplementationMapRuntime"];
    internal static string InvalidMergeMap(object p0, object p1, object p2) => Instance["InvalidMergeMap", p0, p1, p2];
    internal static string InvalidMergeMapArgumentCount(object p0, object p1) => Instance["InvalidMergeMapArgumentCount", p0, p1];
    internal static string InvalidMergeMapArgumentsChanged => Instance["InvalidMergeMapArgumentsChanged"];
    internal static string InvalidMergeMapEnvironmentCount(object p0, object p1, object p2, object p3, object p4, object p5) => Instance["InvalidMergeMapEnvironmentCount", p0, p1, p2, p3, p4, p5];
    internal static string InvalidMergeMapForImplementation(object p0, object p1) => Instance["InvalidMergeMapForImplementation", p0, p1];
    internal static string InvalidMergeMapMemberCount(object p0, object p1) => Instance["InvalidMergeMapMemberCount", p0, p1];
    internal static string InvalidOriginalWorkflowDefinitionForImplementationMapCreation => Instance["InvalidOriginalWorkflowDefinitionForImplementationMapCreation"];
    internal static string InvalidRootMergeMap(object p0, object p1) => Instance["InvalidRootMergeMap", p0, p1];
    internal static string InvalidStateForAsyncCallback => Instance["InvalidStateForAsyncCallback"];
    internal static string InvalidStateInAsyncResult => Instance["InvalidStateInAsyncResult"];
    internal static string InvalidTypeForArgument(object p0, object p1, object p2, object p3) => Instance["InvalidTypeForArgument", p0, p1, p2, p3];
    internal static string InvalidUpdatedWorkflowDefinitionForImplementationMapCreation => Instance["InvalidUpdatedWorkflowDefinitionForImplementationMapCreation"];
    internal static string InvalidUpdateMap(object p0) => Instance["InvalidUpdateMap", p0];
    internal static string KeyNotFoundInDictionary => Instance["KeyNotFoundInDictionary"];
    internal static string LineNumberTooLarge(object p0) => Instance["LineNumberTooLarge", p0];
    internal static string LockTimeoutExceptionMessage(object p0) => Instance["LockTimeoutExceptionMessage", p0];
    internal static string MapEntryNotFound(object p0) => Instance["MapEntryNotFound", p0];
    internal static string MovingActivitiesInStateBlockDU => Instance["MovingActivitiesInStateBlockDU"];
    internal static string MultiDimensionalArraysNotSupported => Instance["MultiDimensionalArraysNotSupported"];
    internal static string MultipleFlowNodesSharingSameChildBlockDU => Instance["MultipleFlowNodesSharingSameChildBlockDU"];
    internal static string MustCallPrepareBeforeFinalize => Instance["MustCallPrepareBeforeFinalize"];
    internal static string MustSetTransactionOnFirstCall => Instance["MustSetTransactionOnFirstCall"];
    internal static string NativeActivityUpdateInstanceThrewException(object p0) => Instance["NativeActivityUpdateInstanceThrewException", p0];
    internal static string NAUCDisposed => Instance["NAUCDisposed"];
    internal static string NoChangesMapQueryNotSupported => Instance["NoChangesMapQueryNotSupported"];
    internal static string NoDynamicArgumentsInActivityDefinitionChange => Instance["NoDynamicArgumentsInActivityDefinitionChange"];
    internal static string NoDynamicArgumentsInActivityDefinitionChangeRuntime => Instance["NoDynamicArgumentsInActivityDefinitionChangeRuntime"];
    internal static string NoNamespace(object p0) => Instance["NoNamespace", p0];
    internal static string NullAssignedToValueType(object p0) => Instance["NullAssignedToValueType", p0];
    internal static string OptionalExtensionTypeMatchedMultiple(object p0) => Instance["OptionalExtensionTypeMatchedMultiple", p0];
    internal static string OriginalActivityReusedInModifiedDefinition(object p0) => Instance["OriginalActivityReusedInModifiedDefinition", p0];
    internal static string OriginalVariableReusedInModifiedDefinition(object p0) => Instance["OriginalVariableReusedInModifiedDefinition", p0];
    internal static string OutArgumentCannotHaveInputValue(object p0) => Instance["OutArgumentCannotHaveInputValue", p0];
    internal static string OutsideTransactionalCommand(object p0) => Instance["OutsideTransactionalCommand", p0];
    internal static string OverloadOnlyCallableFromWorkflowThread => Instance["OverloadOnlyCallableFromWorkflowThread"];
    internal static string PermissionArgumentWrongType(object p0) => Instance["PermissionArgumentWrongType", p0];
    internal static string PersistenceInitializerThrew => Instance["PersistenceInitializerThrew"];
    internal static string PickBranchTriggerActionSwapped => Instance["PickBranchTriggerActionSwapped"];
    internal static string PrivateMembersHaveChanged => Instance["PrivateMembersHaveChanged"];
    internal static string PropertyCannotBeModified(object p0) => Instance["PropertyCannotBeModified", p0];
    internal static string ProvidedStateInitializedForExecution => Instance["ProvidedStateInitializedForExecution"];
    internal static string PublicChildrenChangeBlockDU => Instance["PublicChildrenChangeBlockDU"];
    internal static string PublicEnvironmentAccessToNonGenericActivity => Instance["PublicEnvironmentAccessToNonGenericActivity"];
    internal static string QueryActivityIsInImplementation(object p0) => Instance["QueryActivityIsInImplementation", p0];
    internal static string QueryActivityIsNotInDefinition => Instance["QueryActivityIsNotInDefinition"];
    internal static string QueryActivityIsPublic(object p0) => Instance["QueryActivityIsPublic", p0];
    internal static string QueryVariableIsInImplementation(object p0) => Instance["QueryVariableIsInImplementation", p0];
    internal static string QueryVariableIsNotInDefinition => Instance["QueryVariableIsNotInDefinition"];
    internal static string QueryVariableIsNotPublic => Instance["QueryVariableIsNotPublic"];
    internal static string QueryVariableIsPublic(object p0) => Instance["QueryVariableIsPublic", p0];
    internal static string ReadNotSupported => Instance["ReadNotSupported"];
    internal static string ReadonlyNameScopeCannotBeUpdated => Instance["ReadonlyNameScopeCannotBeUpdated"];
    internal static string ReferencedChildInIsNewlyAdded => Instance["ReferencedChildInIsNewlyAdded"];
    internal static string RemovingTransitionsBlockDU => Instance["RemovingTransitionsBlockDU"];
    internal static string RequiredVariableCoundNotBeExtracted(object p0, object p1) => Instance["RequiredVariableCoundNotBeExtracted", p0, p1];
    internal static string RuntimeArgumentChangeBlockDU(object p0) => Instance["RuntimeArgumentChangeBlockDU", p0];
    internal static string SeekNotSupported => Instance["SeekNotSupported"];
    internal static string SequenceDuplicateReferences => Instance["SequenceDuplicateReferences"];
    internal static string SFxTaskNotStarted => Instance["SFxTaskNotStarted"];
    internal static string SwitchCaseKeyTypesMustMatchExpressionType(object p0, object p1, object p2) => Instance["SwitchCaseKeyTypesMustMatchExpressionType", p0, p1, p2];
    internal static string SwitchCaseNullWithValueType(object p0) => Instance["SwitchCaseNullWithValueType", p0];
    internal static string SwitchCaseTypeMismatch(object p0, object p1) => Instance["SwitchCaseTypeMismatch", p0, p1];
    internal static string TaskTimedOutError(object p0) => Instance["TaskTimedOutError", p0];
    internal static string TextExpressionCompilerActivityNamespaceRequired => Instance["TextExpressionCompilerActivityNamespaceRequired"];
    internal static string TextExpressionCompilerAddGeneratedFileRequired => Instance["TextExpressionCompilerAddGeneratedFileRequired"];
    internal static string TextExpressionCompilerNoCodebase(object p0) => Instance["TextExpressionCompilerNoCodebase", p0];
    internal static string TextExpressionCompilerOutputPathRequired => Instance["TextExpressionCompilerOutputPathRequired"];
    internal static string ThreadNeutralSemaphoreAborted => Instance["ThreadNeutralSemaphoreAborted"];
    internal static string TimeoutInputQueueDequeue(object p0) => Instance["TimeoutInputQueueDequeue", p0];
    internal static string TimerExtensionRequiresWorkflowInstance => Instance["TimerExtensionRequiresWorkflowInstance"];
    internal static string TransactionHandleAlreadyHasTransaction => Instance["TransactionHandleAlreadyHasTransaction"];
    internal static string TransactionInDoubtNonHost => Instance["TransactionInDoubtNonHost"];
    internal static string TransactionRolledBackNonHost => Instance["TransactionRolledBackNonHost"];
    internal static string TriggerOrConditionChangedDuringTransitioning => Instance["TriggerOrConditionChangedDuringTransitioning"];
    internal static string TriggerOrConditionIsReferenced => Instance["TriggerOrConditionIsReferenced"];
    internal static string TryCatchInvalidStateForUpdate(object p0) => Instance["TryCatchInvalidStateForUpdate", p0];
    internal static string TypeNotAssignableTo(object p0, object p1) => Instance["TypeNotAssignableTo", p0, p1];
    internal static string UnexpectedArgumentCount(object p0, object p1, object p2) => Instance["UnexpectedArgumentCount", p0, p1, p2];
    internal static string UnknownExpressionCompilationError(object p0) => Instance["UnknownExpressionCompilationError", p0];
    internal static string UnknownLanguage(object p0) => Instance["UnknownLanguage", p0];
    internal static string UnopenedActivitiesCannotBeExecuted(object p0) => Instance["UnopenedActivitiesCannotBeExecuted", p0];
    internal static string UpdateMapBuilderRequiredProperty(object p0) => Instance["UpdateMapBuilderRequiredProperty", p0];
    internal static string UpdateSymbolsMustMatch => Instance["UpdateSymbolsMustMatch"];
    internal static string ValueMustBeNonNegative => Instance["ValueMustBeNonNegative"];
    internal static string VariableCannotBePopulatedInLocationEnvironment(object p0) => Instance["VariableCannotBePopulatedInLocationEnvironment", p0];
    internal static string VariableNameNotAnIdentifier(object p0) => Instance["VariableNameNotAnIdentifier", p0];
    internal static string VariableOrArgumentAdditionToReferencedEnvironmentNoDUSupported => Instance["VariableOrArgumentAdditionToReferencedEnvironmentNoDUSupported"];
    internal static string VariableOrArgumentDoesNotExist(object p0) => Instance["VariableOrArgumentDoesNotExist", p0];
    internal static string VariableTypeNotMatchLocationType(object p0, object p1) => Instance["VariableTypeNotMatchLocationType", p0, p1];
    internal static string WorkflowInstanceUnlocked(object p0) => Instance["WorkflowInstanceUnlocked", p0];
    internal static string WrongArgumentType(object p0, object p1) => Instance["WrongArgumentType", p0, p1];
    internal static string WrongEnvironmentCount(object p0, object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8) => Instance["WrongEnvironmentCount", p0, p1, p2, p3, p4, p5, p6, p7, p8];
    internal static string WrongMemberCount(object p0, object p1, object p2) => Instance["WrongMemberCount", p0, p1, p2];
    internal static string WrongOnCreateDynamicUpdateMapForNativeActivity => Instance["WrongOnCreateDynamicUpdateMapForNativeActivity"];
    internal static string WrongOriginalEnvironmentCount(object p0, object p1, object p2, object p3, object p4, object p5, object p6) => Instance["WrongOriginalEnvironmentCount", p0, p1, p2, p3, p4, p5, p6];
    internal static string XamlElementExpected => Instance["XamlElementExpected"];
    internal static string XamlElementExpectedAt(object p0, object p1) => Instance["XamlElementExpectedAt", p0, p1];
#endif
}
