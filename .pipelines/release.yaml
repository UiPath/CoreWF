parameters:
- name: type
  type: string
  default: internal
  values:
  - internal
  - public

jobs:
- job: PublishPackages
  displayName: Publish Packages
  pool:
    vmImage: windows-latest
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: $(ArtifactName)
      path: $(Pipeline.Workspace)/$(ArtifactName)

  - template: Signing/signing.yml@templates
    parameters:
      azureConnectionName: $(AzureConnectionSigning)
      pathsToSign: $(Pipeline.Workspace)/$(ArtifactName)/*.nupkg
      packagesSignAuthor: true
      packagesSignRepo: false
      runInParallel: true

  - ${{ if eq(parameters.type, 'internal') }}:
    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: $(Pipeline.Workspace)/$(ArtifactName)/*.snupkg
        destinationFolder: $(Pipeline.Workspace)/$(ArtifactName)/Symbols
        cleanDestinationFolder: false
        overwriteExistingFiles: true

    - task: PublishSymbols@2
      inputs:
        symbolsFolder: $(Pipeline.Workspace)/$(ArtifactName)/Symbols
        searchPattern: '**/*.pdb'
        symbolServerType: teamServices

  - task: NuGetToolInstaller@1
    inputs:
      versionSpec: 6.x

  - task: NuGetAuthenticate@0
    inputs:
      forceReinstallCredentialProvider: true

  - task: NuGetCommand@2
    displayName: Push NuGet Packages
    inputs:
      command: push
      ${{ if eq(parameters.type, 'public') }}:
        packagesToPush: $(Pipeline.Workspace)/$(ArtifactName)/**/*.nupkg
        nuGetFeedType: external
        publishFeedCredentials: $(NugetFeedServiceConnection)
      ${{ else }}:
        packagesToPush: $(Pipeline.Workspace)/$(ArtifactName)/**/*.nupkg
        nuGetFeedType: internal
        publishVstsFeed: $(AzureFeedInternal)
    condition: succeeded()
